#!/usr/bin/env python

import sys
sys.path.append("/home/pooja/caffe/python")
sys.path.append('/usr/local/lib/python2.7/site-packages')
import caffe
import numpy as np
from random import randint
from operator import itemgetter

MODEL_FILE = '/home/msprj_security/010102157/caffe/examples/malware/malware.prototxt'
PRETRAINED = '/home/msprj_security/010102157/caffemodel_to_test/malware_iter_40000_Andro.caffemodel'
LABEL_FILE = '/home/msprj_security/010102157/caffe/data/malware/train.txt'
MALICIOUS_LABEL_FILE = '/home/msprj_security/010102157/caffe/data/malware/training_malicious_types.txt'

print("executing malware predict class demo file")

caffe.set_mode_cpu()
# Test self-made image

img = caffe.io.load_image('/home/msprj_security/pngfile/com.cisco.anyconnect.vpn.android.avf-1.apk.png', color=False)
img = img.astype(np.uint8)
net=caffe.Classifier(MODEL_FILE, PRETRAINED, image_dims=(120,120), raw_scale=255)

log = open('/home/msprj_security/pngfile/caffe_output.txt','w')

#works
out = net.forward(data=np.asarray([img.transpose(2,0,1)]))
output_prob = out['prob'][0]
print >> log, "predicted class:", out['prob'].argmax()

if out['prob'].argmax() == 1:
        #Predict label
        fi = open(LABEL_FILE)
        labels = fi.readlines()

	 #Predict probability
        #top_inds = output_prob.argsort()[::-1][:5]
        #top_inds = output_prob[0].argmax()
        #label_name = labels[top_inds]
        #print 'Probability accuracy:',output_prob[top_inds]

	val = randint(0,500)
        #print 'rand:', val
        new_labels = np.loadtxt(MALICIOUS_LABEL_FILE,str)
        #print 'output label:', new_labels[output_prob.argmax()]
        top_inds = output_prob.argsort()[::-1][:4]
        print 'before:', top_inds
        top_inds = [val-x for x in top_inds]
        print 'after:', top_inds 
        items = zip(output_prob[top_inds]*1000, new_labels[top_inds])
        #print 'items:', items
        print >> log, 'probabilities and labels:\n',items
        print >> log, 'output label:', max(items,key=itemgetter(0))


log.close()
